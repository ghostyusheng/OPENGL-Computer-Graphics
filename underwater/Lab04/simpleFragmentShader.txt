#version 330 core

in vec3 LightIntensity;
in vec2 Texcoord;
in vec3 FragPos; // 接收片段位置
in vec3 Normal;  // 接收法线

out vec4 fragColor;

uniform vec3 ambientLight;
uniform vec3 Kd; // 漫反射颜色
uniform vec3 Ks; // 镜面反射颜色
uniform float Shininess; // 高光强度

uniform vec3 viewPos; // 观察者位置

void main() {
    vec3 ambient = ambientLight * Kd; // 环境光
    vec3 diffuse = LightIntensity; // 漫反射光

    // 计算镜面光
    vec3 lightDir = normalize(viewPos - FragPos);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, Normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), Shininess);
    vec3 specular = Ks * spec;

    vec3 finalColor = ambient + diffuse + specular;
    fragColor = vec4(finalColor, 1.0);
}
