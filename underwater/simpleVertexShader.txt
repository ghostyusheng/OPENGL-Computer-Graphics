#version 330

in vec3 vertex_position;
in vec3 vertex_normal;


out vec3 LightIntensity;

vec4 LightPosition = vec4(10.0, 20.0, 10.0, 1.0); // Light source from above
vec3 Kd = vec3(0.0, 0.5, 0.7); // Blue-green diffuse color for underwater effect
vec3 Ld = vec3(0.8, 0.9, 1.0); // Light source intensity, slightly blue-tinted


uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

void main(){

  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);
  // Convert normal and position to eye coords
  // Normal in view space
  vec3 tnorm = normalize( NormalMatrix * vertex_normal);
  // Position in view space
  vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);
  //normalised vector towards the light source
 vec3 s = normalize(vec3(LightPosition - eyeCoords));
  
  float distance = length(LightPosition.xyz - vec3(gl_Position));
float attenuation = 1.0 / (1.0 + 0.02 * distance + 0.001 * distance * distance);

LightIntensity = Ld * Kd * max(dot(s, tnorm), 0.0) * attenuation;
  
  // Convert position to clip coordinates and pass along
  gl_Position = proj * view * model * vec4(vertex_position,1.0);
}


  